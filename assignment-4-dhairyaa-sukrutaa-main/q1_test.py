# -*- coding: utf-8 -*-
"""Q1_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS8-5c3lwMfeY1LGlMIEVk-f-5K2bDZC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegressionCustom
from metrics import *
import time
np.random.seed(45)

N = 30
P = 5
X = pd.DataFrame(np.random.randn(N, P))
y = pd.Series(np.random.randn(N))
print(X.shape)
exp = 5


# Evaluating sklearn's implementation of linear regression
times = []
for i in range(exp):
    begin = time.time()
    LR = LinearRegressionCustom(fit_intercept=True)
    LR.fit_sklearn_LR(X, y)
    y_hat = LR.predict(X)
    end = time.time()
    times.append(end-begin)

print('For sklearn LinearRegression : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print('Time taken: ', np.mean(times))
print("---------------------------")


# Evaluating solution of linear regression using normal equations
times = []
for i in range(exp):
    begin = time.time()
    LR = LinearRegressionCustom(fit_intercept=True)
    LR.fit_normal_equations(X, y)
    y_hat = LR.predict(X)
    end = time.time()
    times.append(end-begin)

print('For linear regression using normal equations : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print('Time taken: ', np.mean(times))
print("---------------------------")


# Evaluating solution of linear regression using SVD
LR = LinearRegressionCustom(fit_intercept=True)
times = []
for i in range(exp):
    begin = time.time()
    LR = LinearRegressionCustom(fit_intercept=True)
    LR.fit_SVD(X, y)
    y_hat = LR.predict(X)
    end = time.time()
    times.append(end-begin)

print('For linear regression using SVD : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print('Time taken: ', np.mean(times))
print("---------------------------")
