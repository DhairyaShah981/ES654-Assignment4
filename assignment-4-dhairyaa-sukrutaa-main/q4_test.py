# -*- coding: utf-8 -*-
"""Q4_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dUjXq9nEOX2PMOboEnFAB_-x-hQGM49x
"""

import numpy as np
import matplotlib.pyplot as plt
from preprocessing.polynomial_features import PolynomialFeatures
from linearRegression.linear_regression import LinearRegressionCustom
import pandas as pd
import os.path
from os import path
np.random.seed(45)  # Setting seed for reproducibility

if not path.exists('Plots/Question4/'):
    os.makedirs('Plots/Question4/')


def data_create(degrees, include_bias=True):
    li = []
    x = np.array([i*np.pi/180 for i in range(60, 300, 2)])
    y = 3*x + 8 + np.random.normal(0, 3, len(x))
    for deg in degrees:
        go = PolynomialFeatures(deg, include_bias)
        li_1 = []
        for i in range(len(x)):
            j = np.array([x[i]])
            j = go.transform(j)
            li_1.append(j)
        X = np.array(li_1)
        lin_reg = LinearRegressionCustom(fit_intercept=include_bias)
        lin_reg.fit_sklearn_LR(X, y)
        the_tas = lin_reg.coef_
        norm = np.linalg.norm(np.array(the_tas))
        li.append(norm)
    return(li)


def make_plots(degrees, include_bias=True):
    li = data_create(degrees)
    plt.plot(degrees, li)
    plt.xlabel("Degree of fitted polynmial")
    plt.ylabel("Magnitude of theta")
    plt.yscale("log")
    plt.savefig("./Plots/Question4/Plot_4.png", dpi=400)


make_plots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])

# TODO : Write here
# Preprocess the input using the polynomial features
# Solve the resulting linear regression problem by calling any one of the
# algorithms you have implemented.
