# -*- coding: utf-8 -*-
"""Q7_forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QygJyzTuf4wJ3ioxCqF0boFIbPNbBJd6
"""

import numpy as np
import pandas as pd
from linearRegression.linear_regression import LinearRegressionCustom
import matplotlib.pyplot as plt
import os.path
from os import path
np.random.seed(45)  #Setting seed for reproducibility

if not path.exists('Plots/Question7/'):
  os.makedirs('Plots/Question7/')


class Auto_reg():

    def __init__(self, lag = 30):
        self.coef_ = []
        self.lag = lag
        self.coef_ = []
        self.X = []
        self.y = []

    def fit_simple(self, X):
        li_main = []
        y = []
        for i in range(len(X)-self.lag):
            li = X[i:i+self.lag]
            y.append(X[i+self.lag])
            li_main.append(li)

        X = pd.DataFrame(li_main)
        self.X = X
        y = pd.Series(y)
        self.y = y
        print(X)
        print(y)
        fit_mod = LinearRegressionCustom()
        fit_mod.fit_normal_equations(X,y)
        self.coef_ = fit_mod.coef_ 
    
    def pred(self):
        ones_column = np.ones((self.X.shape[0], 1))
        X = np.concatenate((ones_column, self.X), axis=1)
        return X.dot(self.coef_)
    
    def rmse_loss(self):
        # Compute the MSE loss with the learned model
        y_pred = self.pred()
        rmse = np.sqrt(np.mean((self.y - y_pred)**2))
        return rmse
    

    def plot_(self):
        y_pred = self.pred()
        plt.plot(range(len(y_pred)), y_pred, label="Predicted_vals", alpha = 0.5)
        plt.plot(range(len(self.y)), self.y, label = "real_values", alpha = 0.5)
        plt.legend()
        var = "./Plots/Question6/Plot_7_ful_" + ".png"
        plt.savefig(var, dpi=400)
        plt.show()

    def plot_sma(self, n):
        y_pred = self.pred()[:n]
        plt.plot(range(n), y_pred, label="Predicted_vals", alpha = 0.5)
        plt.plot(range(n), self.y[:n], label = "real_values", alpha = 0.5)
        plt.legend()
        var = "./Plots/Question6/Plot_7_10_" + ".png"
        plt.savefig(var, dpi=400)
        plt.show()

url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv'
df = pd.read_csv(url)
data_train = list(df["Temp"])
auto_reg_test = Auto_reg()
auto_reg_test.fit_simple(data_train)
print(auto_reg_test.rmse_loss())
#auto_reg_test.plot_()
auto_reg_test.plot_sma(100)
auto_reg_test.plot_()
